# -*- coding: utf-8 -*-
"""mmearthquake_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hm3iIZLbmTPD5Xb5CThtR3MrJcJIKvh6
"""

#!pip install streamlit
#!pip install geopy
#!pip install folium
#!pip install streamlit-folium
#!pip install pandas

import streamlit as st
import pandas as pd
import requests
import io
import time
import folium
import numpy as np
from geopy.distance import geodesic
from folium.plugins import HeatMap
from datetime import datetime
from streamlit_folium import folium_static

# USGS API URL
url = "https://earthquake.usgs.gov/fdsnws/event/1/query"

st.title("Myanmar Earthquake Affected Population Estimation")

# User Inputs
min_magnitude = st.slider("Minimum Earthquake Magnitude", 4.0, 10.0, 4.0)
start_year = st.number_input("Start Year", min_value=1900, max_value=2025, value=2024)
end_year = st.number_input("End Year", min_value=1900, max_value=2025, value=2025)

if st.button("Fetch Earthquake Data"):
    batch_sizes = {(2024, 2025): 1}
    all_data = []

    for (start, end), batch_size in batch_sizes.items():
        for year in range(start, end + 1, batch_size):
            params = {
                "format": "csv",
                "starttime": f"{year}-01-01",
                "endtime": f"{min(year + batch_size - 1, end_year)}-12-31",
                "minmagnitude": min_magnitude,
                "maxmagnitude": 10.0,
                "orderby": "time"
            }

            response = requests.get(url, params=params)
            if response.status_code == 200:
                df = pd.read_csv(io.StringIO(response.text))
                all_data.append(df)

    if all_data:
        df_eq = pd.concat(all_data, ignore_index=True)
        st.session_state.df_eq = df_eq
        st.success(f"Fetched {len(df_eq)} earthquake records")
    else:
        st.error("No data retrieved.")

if "df_eq" in st.session_state:
    df_eq = st.session_state.df_eq

    myanmar_bounds = (16.0, 28.0, 92.0, 101.0)
    df_myanmar = df_eq[(df_eq["latitude"] >= myanmar_bounds[0]) & (df_eq["latitude"] <= myanmar_bounds[1]) &
                        (df_eq["longitude"] >= myanmar_bounds[2]) & (df_eq["longitude"] <= myanmar_bounds[3])]

    st.write(f"Filtered {len(df_myanmar)} earthquakes in Myanmar")

    def estimate_affected_population(eq_lat, eq_lon, eq_mag, df_pop_mm):
        affected_pop = 0
        for _, row in df_pop_mm.iterrows():
            region_lat, region_lon, total_pop = row["lat"], row["lon"], row["hh_total"]
            distance_km = geodesic((eq_lat, eq_lon), (region_lat, region_lon)).km
            max_radius = eq_mag * 15
            if distance_km <= max_radius:
                weight = np.exp(-distance_km / (max_radius / 2))
                magnitude_factor = (eq_mag / 7.0) ** 2
                affected_pop += total_pop * weight * magnitude_factor
        return int(affected_pop)

    def plot_earthquake_map():
        myanmar_map = folium.Map(location=[21.0, 96.0], zoom_start=5)
        for _, row in df_myanmar.iterrows():
            folium.CircleMarker(
                location=[row["latitude"], row["longitude"]],
                radius=max(5, np.log1p(row["mag"]) * 2),
                color="red",
                fill=True,
                fill_color="red",
                fill_opacity=0.7,
                popup=f"Magnitude: {row['mag']}"
            ).add_to(myanmar_map)
        folium_static(myanmar_map)

    if st.button("Show Earthquake Map"):
        plot_earthquake_map()

